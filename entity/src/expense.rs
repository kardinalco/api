//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::ExpenseCurrency;
use super::sea_orm_active_enums::ExpenseFrequency;
use sea_orm::entity::prelude::*;
use serde::Deserialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize)]
#[sea_orm(table_name = "expense")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    pub description: Option<String>,
    #[sea_orm(column_type = "Float")]
    pub amount: f32,
    pub frequency: ExpenseFrequency,
    pub currency: ExpenseCurrency,
    pub start_date: DateTime,
    pub end_date: Option<DateTime>,
    pub is_active: bool,
    pub created_at: DateTime,
    pub created_by: String,
    pub updated_at: Option<DateTime>,
    pub updated_by: Option<String>,
    pub deleted_at: Option<DateTime>,
    pub deleted_by: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::CreatedBy",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    SelfRef3,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::DeletedBy",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    SelfRef2,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::UpdatedBy",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    SelfRef1,
    #[sea_orm(has_many = "super::expense_house::Entity")]
    ExpenseHouse,
    #[sea_orm(has_many = "super::expense_payment::Entity")]
    ExpensePayment,
    #[sea_orm(has_many = "super::expense_reimbursement::Entity")]
    ExpenseReimbursement,
    #[sea_orm(has_many = "super::expense_reminder::Entity")]
    ExpenseReminder,
    #[sea_orm(has_many = "super::expense_shared::Entity")]
    ExpenseShared,
}

impl Related<super::expense_house::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ExpenseHouse.def()
    }
}

impl Related<super::expense_payment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ExpensePayment.def()
    }
}

impl Related<super::expense_reimbursement::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ExpenseReimbursement.def()
    }
}

impl Related<super::expense_reminder::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ExpenseReminder.def()
    }
}

impl Related<super::expense_shared::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ExpenseShared.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
