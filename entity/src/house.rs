//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::HouseLocationType;
use sea_orm::entity::prelude::*;
use serde::Deserialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize)]
#[sea_orm(table_name = "house")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    pub code: String,
    pub description: Option<String>,
    pub city: Option<String>,
    pub country: Option<String>,
    pub zip_code: Option<String>,
    pub address: Option<String>,
    #[sea_orm(column_type = "Float", nullable)]
    pub latitude: Option<f32>,
    #[sea_orm(column_type = "Float", nullable)]
    pub longitude: Option<f32>,
    pub location_type: HouseLocationType,
    pub owner_name: Option<String>,
    pub owner_contact_info: Option<String>,
    pub owner_phone: Option<String>,
    pub owner_email: Option<String>,
    pub built_year: Option<i32>,
    pub acquired_at: Option<DateTime>,
    pub created_at: DateTime,
    pub created_by: String,
    pub updated_at: Option<DateTime>,
    pub updated_by: Option<String>,
    pub deleted_at: Option<DateTime>,
    pub deleted_by: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::house_user::Entity")]
    HouseUser,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::CreatedBy",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    User3,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::DeletedBy",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    User2,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UpdatedBy",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    User1,
}

impl Related<super::house_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HouseUser.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::house_user::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::house_user::Relation::House.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
