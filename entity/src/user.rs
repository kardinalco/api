//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use super::sea_orm_active_enums::RegisteredWith;
use sea_orm::entity::prelude::*;
use serde::Deserialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub first_name: String,
    pub last_name: String,
    #[sea_orm(unique)]
    pub email: String,
    pub email_id: Option<i32>,
    pub password: String,
    pub is_active: bool,
    pub is_deleted: bool,
    pub is_verified: bool,
    pub phone_number: Option<String>,
    pub birthday: Option<Date>,
    pub country: Option<String>,
    pub city: Option<String>,
    pub address: Option<String>,
    pub zip_code: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub picture: Option<String>,
    pub registered_with: RegisteredWith,
    pub created_at: DateTime,
    pub created_by: Option<String>,
    pub updated_at: Option<DateTime>,
    pub updated_by: Option<String>,
    pub deleted_at: Option<DateTime>,
    pub deleted_by: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::house_user::Entity")]
    HouseUser,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::CreatedBy",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    SelfRef3,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::DeletedBy",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    SelfRef2,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::UpdatedBy",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    SelfRef1,
    #[sea_orm(has_many = "super::user_role::Entity")]
    UserRole,
}

impl Related<super::house_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HouseUser.def()
    }
}

impl Related<super::user_role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserRole.def()
    }
}

impl Related<super::house::Entity> for Entity {
    fn to() -> RelationDef {
        super::house_user::Relation::House.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::house_user::Relation::User.def().rev())
    }
}

impl Related<super::role::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_role::Relation::Role.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_role::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
